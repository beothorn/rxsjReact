{"version":3,"sources":["tweetsView/components/LikedCounter.js","tweetsView/components/TweetsVisibilityToggler.js","tweetsView/components/TweetList.js","tweetsView/TweetsView.js","App.js","store/Store.js","tweetsSource/tweetFeedToAction.js","tweetsSource/removeOlderTweets.js","tweetsView/TweetsViewReducer.js","DataSource.js","index.js"],"names":["likedCounter","count","toggleSelected","toggleNotSelected","tweetsVisibilityToggler","dispatcher","selected","className","onClick","next","type","payload","tweetList","visibility","tweets","tweetsToShow","filter","tweet","size","id","tweetsRendered","map","likeButton","data-testid","timestamp","unlikeButton","Date","toLocaleString","liked","TweetView","tweetsVisibility","LikedCounter","TweetsVisibilityToggler","TweetList","App","app","TweetsView","getIn","store","reducers","initialState","Immutable","fromJS","reducer","set","undefined","Subject","stateObservable","pipe","tap","val","scan","state","action","newState","reducerName","get","shareReplay","subscribe","tweetFeedToAction","tweetFeed","rawTweet","addTweetAction","removeOlderTweets","everyIntervalMillis","olderThanMillis","outputObservable","interval","i","getTime","tweetsViewReducer","update","insert","newStateAfterRemovingTweets","countLikes","t","index","findIndex","newStateAfterChangeLikes","createTweetSource","frequency","account","attribute","now","content","merge","Store","tweetsView","Tweets","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4LAEeA,EAFO,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAH,OAAe,8BAAIA,EAAJ,mBCA/BC,EAAiB,iBACjBC,EAAoB,oBAYXC,EAViB,SAAC,GAAD,IAAGC,EAAH,EAAGA,WAAYC,EAAf,EAAeA,SAAf,OAC5B,sCACI,sBAAMC,UAAwB,QAAbD,EAAqBJ,EAAiBC,EAAmBK,QACtE,kBAAMH,EAAWI,KAAK,CAACC,KAAM,uBAAwBC,QAAS,SADlE,iBAGA,sBAAMJ,UAAwB,UAAbD,EAAuBJ,EAAiBC,EAAmBK,QACxE,kBAAMH,EAAWI,KAAK,CAACC,KAAM,uBAAwBC,QAAS,WADlE,uBCgCOC,EAxCI,SAAC,GAAwC,IAAtCP,EAAqC,EAArCA,WAAYQ,EAAyB,EAAzBA,WAAYC,EAAa,EAAbA,OAEtCC,EAAeD,EAED,UAAfD,IACCE,EAAeD,EAAOE,QAAQ,SAAAC,GAAK,OAAIA,EAAK,UAahD,GAAyB,IAAtBF,EAAaG,KAAY,OAAO,qBAAKC,GAAI,cAAT,uBAEnC,IAAIC,EAAiBL,EAAaM,KAAK,SAAAJ,GACnC,IAAMK,EAAa,wBAAQf,UAAU,aAAagB,cAAa,eAAeN,EAAK,UAAeT,QAAS,kBAb5FgB,EAa4GP,EAAK,UAbnGZ,EAAWI,KAAK,CAC7CC,KAAM,sBACNC,QAASa,IAFK,IAACA,GAaI,kBACbC,EAAe,wBAAQlB,UAAU,eAAegB,cAAa,iBAAiBN,EAAK,UAAeT,QAAS,kBAThGgB,EASkHP,EAAK,UATzGZ,EAAWI,KAAK,CAC/CC,KAAM,wBACNC,QAASa,IAFO,IAACA,GASI,oBAErB,OAAO,oBAAGjB,UAAWU,EAAK,MAAY,aAAe,QAA9C,UACH,sBAAMV,UAAU,iBAAhB,SAAkCU,EAAK,UACvC,sBAAMV,UAAU,eAAhB,SAAgCU,EAAK,UACrC,uBAAMV,UAAU,YAAhB,wBAAwC,IAAImB,KAAKT,EAAK,WAAeU,oBACnEV,EAAMW,MAASH,EAAeH,IAJ+BL,EAAK,cAQ5E,OAAO,sBAAKV,UAAU,YAAf,UACH,wBAAQY,GAAG,iBAAiBX,QAAS,kBAAMH,EAAWI,KAAK,CAACC,KAAM,2BAAlE,uBACCU,MCZMS,EAlBG,SAAC,GAA4D,IAA1DxB,EAAyD,EAAzDA,WAAYL,EAA6C,EAA7CA,aAAc8B,EAA+B,EAA/BA,iBAAkBhB,EAAa,EAAbA,OAE7D,OAAO,sBAAKP,UAAU,YAAf,UACH,sBAAKY,GAAI,gBAAT,UACI,cAACY,EAAD,CAAc9B,MAAOD,IACrB,cAACgC,EAAD,CACI3B,WAAYA,EACZC,SAAUwB,OAGlB,cAACG,EAAD,CACI5B,WAAYA,EACZQ,WAAYiB,EACZhB,OAAQA,QCFLoB,EAZH,SAAC,GAAyB,IAAvB7B,EAAsB,EAAtBA,WAAY8B,EAAU,EAAVA,IACzB,OAAO,sBAAK5B,UAAU,MAAf,UACH,6CACI,cAAC6B,EAAD,CACI/B,WAAYA,EACZL,aAAgBmC,EAAIE,MAAM,CAAC,aAAc,iBACzCP,iBAAoBK,EAAIE,MAAM,CAAC,aAAc,qBAC7CvB,OAAUqB,EAAIE,MAAM,CAAC,aAAc,iB,wCCuClCC,EA1CD,SAACC,GACX,IAAIC,EAAeC,IAAUC,OAAO,IAEpC,IAAK,IAAMC,KAAWJ,EAClBC,EAAeA,EAAaI,IAAID,EAASJ,EAASI,QAASE,EAAW,CAACnC,KAAK,mBAAoBC,QAAQ,MAG5G,IAAMN,EAAa,IAAIyC,IAanBC,EAAkB1C,EAAW2C,KAC7BC,aAAI,SAAAC,GAxBU,SA2BdC,aAfW,SAACC,EAAOC,GACnB,IAAIC,EAAWF,EACf,IAAK,IAAMG,KAAehB,EACtBe,EAAWA,EAASV,IAChBW,EACAhB,EAASgB,GAAaH,EAAMI,IAAID,GAAcF,IAGtD,OAAOC,IAOMd,GACbS,aAAI,SAAAC,GA3BQ,SA8BZO,YAAY,IAWhB,OAHAV,EAAgBW,WAAW,eAC3BrD,EAAWI,KAAK,CAACC,KAAK,YAAaC,QAAQ,KAEpC,CAACN,aAAY0C,oB,gBClCTY,EAVW,SAACC,EAAWvD,GAAZ,OACtBuD,EAAUZ,KACN3B,aAAK,SAAAwC,GAAQ,MAAK,CACdnD,KAAK,qBACLC,QAAQ,2BAAKkD,GAAN,IAAgBjC,OAAO,SAEpC8B,WAAU,SAAAI,GACRzD,EAAWI,KAAKqD,O,QCCTC,EAPS,SAACC,EAAqBC,EAAiBC,GAC3DC,YAASH,GAAqBhB,KAAK3B,aAAI,SAAA+C,GAAC,MAAK,CACzC1D,KAAM,yBACNC,SAAS,IAAIe,MAAO2C,UAAYJ,OAC/BP,WAAW,SAAAL,GAAM,OAAIa,EAAiBzD,KAAK4C,OCL9Cb,EAAeC,IAAUC,OAAO,CAClC1C,aAAc,EACd8B,iBAAkB,MAClBhB,OAAQ2B,IAAUC,OAAO,MAuCd4B,EApCW,WAA4C,IAA3ClB,EAA0C,uDAAlCZ,EAAkC,yCAAnB9B,EAAmB,EAAnBA,KAAMC,EAAa,EAAbA,QACpD,OAAQD,GACJ,IAAK,qBACD,OAAO0C,EAAMmB,OAAO,UAAU,SAAAzD,GAAM,OAAIA,EAAO0D,OAAO,EAAG7D,MAC7D,IAAK,yBACD,IAAI8D,EAA8BrB,EAAMmB,OAAO,UAAU,SAAAzD,GAAM,OAAIA,EAAOE,QAAQ,SAAAC,GAAK,OAAIA,EAAK,UAAgBN,QAC5G+D,EAAaD,EAA4BjB,IAAI,UAAUxC,QAAO,SAAA2D,GAAC,OAAIA,EAAE/C,SAAOV,KAChF,OAAOuD,EAA4B7B,IAAI,eAAgB8B,GAC3D,IAAK,wBACD,OAAOtB,EAAMmB,OAAO,UAAU,kBAAM9B,IAAUC,OAAO,OAAKE,IAAI,eAAgB,GAClF,IAAK,sBACL,IAAK,wBACD,IAAIgC,EAAQxB,EAAMI,IAAI,UAAUqB,WAAU,SAAC5D,GAAD,OAAWA,EAAK,YAAkBN,KAC5E,IAAc,IAAXiE,EAAc,OAAOxB,EACxB,IAAIxB,GAAQ,EACA,wBAATlB,IACCkB,GAAQ,GAEA,0BAATlB,IACCkB,GAAQ,GAEZ,IAAIkD,EAA2B1B,EAAMmB,OAAO,gBAAgB,SAACtE,GAAD,OAAWA,GAAU2B,EAAO,GAAG,MAC3F,OAAOkD,EAAyBP,OAAO,UACnC,SAAAzD,GAAM,OACFA,EAAOyD,OACHzD,EAAO+D,WAAU,SAAC5D,GAAD,OAAWA,EAAK,YAAkBN,MACnD,SAACM,GAAD,mBAAC,eAAeA,GAAhB,IAAuBW,MAAOA,UAG9C,IAAK,uBAAwB,OAAOwB,EAAMR,IAAI,mBAAoBjC,GAItE,OAAOyC,G,QCtCL2B,EAAoB,SAACC,EAAWC,EAASC,GAC3C,OAAOf,YAASa,GAAWhC,KAAK3B,aAAI,SAAA+C,GAAC,MAAK,CACtCa,UACAzD,UAAWE,KAAKyD,MAChBC,QAAQ,GAAD,OAAKF,EAAL,yBAA+Bd,EAAI,SASnCtD,EANAuE,YACXN,EAAkB,IAAM,eAAgB,YACxCA,EAAkB,IAAM,cAAe,UACvCA,EAAkB,IAAM,cAAe,U,ECHLO,EAAM,CACxCC,eADGlF,E,EAAAA,WAAY0C,E,EAAAA,gBAInBY,EAAkB6B,EAAQnF,GAC1B0D,EAAkB,IAAM,IAAO1D,GAE/B0C,EAAgBW,WAAW,SAAAvB,GAAG,OAC1BsD,IAASC,OACL,cAAC,IAAMC,WAAP,UACI,cAAC,EAAD,CACItF,WAAYA,EACZ8B,IAAKA,MAGbyD,SAASC,eAAe,c","file":"static/js/main.00ddb387.chunk.js","sourcesContent":["const likedCounter =  ({ count }) => <p>{count} liked tweet</p>\n\nexport default likedCounter","const toggleSelected = \"toggleSelected\"\nconst toggleNotSelected = \"toggleNotSelected\"\n\nconst tweetsVisibilityToggler = ({ dispatcher, selected }) => \n    <p>Show: \n        <span className={selected === \"All\" ? toggleSelected : toggleNotSelected} onClick={\n            () => dispatcher.next({type: \"TweesView/ToggleView\", payload: \"All\"})\n        }>All</span>\n        <span className={selected === \"Liked\" ? toggleSelected : toggleNotSelected} onClick={\n            () => dispatcher.next({type: \"TweesView/ToggleView\", payload: \"Liked\"})\n        }>Liked</span> \n    </p>\n\nexport default tweetsVisibilityToggler","const tweetList =  ({ dispatcher, visibility, tweets }) => {\n    \n    let tweetsToShow = tweets\n\n    if(visibility === \"Liked\"){\n        tweetsToShow = tweets.filter( tweet => tweet[\"liked\"])\n    }\n\n    const likeTweet = (timestamp) => dispatcher.next({\n        type: \"TweesView/LikeTweet\",\n        payload: timestamp\n    })\n\n    const unlikeTweet = (timestamp) => dispatcher.next({\n        type: \"TweesView/UnlikeTweet\",\n        payload: timestamp\n    })\n\n    if(tweetsToShow.size === 0) return <div id={\"noTweetsMsg\"}>No tweets</div>\n\n    let tweetsRendered = tweetsToShow.map( tweet => {\n        const likeButton = <button className=\"likeButton\" data-testid={\"like-button-\"+tweet[\"timestamp\"]} onClick={() => likeTweet(tweet[\"timestamp\"])}>Like</button>\n        const unlikeButton = <button className=\"unlikeButton\" data-testid={\"unlike-button-\"+tweet[\"timestamp\"]} onClick={() => unlikeTweet(tweet[\"timestamp\"])}>Unlike</button>\n\n        return <p className={tweet[\"liked\"] ? \"likedTweet\" : \"tweet\"} key={tweet[\"timestamp\"]}>\n            <span className=\"accountHandler\">{tweet[\"account\"]}</span>\n            <span className=\"tweetContent\">{tweet[\"content\"]}</span>\n            <span className=\"tweetDate\">tweeted at {new Date(tweet[\"timestamp\"]).toLocaleString()}</span> \n            {(tweet.liked) ? unlikeButton : likeButton}\n        </p>\n    })\n\n    return <div className=\"tweetList\">\n        <button id=\"clearAllButton\" onClick={() => dispatcher.next({type: \"TweesView/ClearTweets\"})}>Clear All</button>\n        {tweetsRendered}\n    </div>\n    \n}\n    \n\nexport default tweetList","import LikedCounter from './components/LikedCounter'\nimport TweetsVisibilityToggler from './components/TweetsVisibilityToggler'\nimport TweetList from './components/TweetList'\n\nconst TweetView = ({ dispatcher, likedCounter, tweetsVisibility, tweets }) => {\n\n    return <div className=\"TweetView\">\n        <div id={\"headerOptions\"}>\n            <LikedCounter count={likedCounter}/>\n            <TweetsVisibilityToggler \n                dispatcher={dispatcher}\n                selected={tweetsVisibility} \n            />\n        </div>\n        <TweetList \n            dispatcher={dispatcher}\n            visibility={tweetsVisibility}\n            tweets={tweets} \n        />\n    </div>\n}\n\nexport default TweetView","import TweetsView from './tweetsView/TweetsView'\nimport React from \"react\"\n\nconst App = ({ dispatcher, app }) => {    \n  return <div className=\"App\">\n      <h1>Twitterlike</h1>\n          <TweetsView \n              dispatcher={dispatcher}\n              likedCounter = {app.getIn([\"tweetsView\", \"likedCounter\"])}\n              tweetsVisibility = {app.getIn([\"tweetsView\", \"tweetsVisibility\"])}\n              tweets = {app.getIn([\"tweetsView\", \"tweets\"])}\n          />\n    </div>\n}\n\nexport default App","import { tap, scan, shareReplay } from 'rxjs/operators'\nimport { Subject } from 'rxjs'\nimport Immutable from 'immutable'\n\nconst DEBUG_ACTIONS = false\nconst DEBUG_STATE = false\n\nconst store = (reducers) => {\n    let initialState = Immutable.fromJS({})\n\n    for (const reducer in reducers) {\n        initialState = initialState.set(reducer, reducers[reducer](undefined, {type:\"LoadInitialState\", payload:\"\"}))\n    }\n\n    const dispatcher = new Subject()\n\n    const reduce = (state, action) => {\n        let newState = state\n        for (const reducerName in reducers) {\n            newState = newState.set(\n                reducerName, \n                reducers[reducerName](state.get(reducerName), action)\n            )\n        }\n        return newState\n    }\n\n    let stateObservable = dispatcher.pipe(\n        tap(val =>{if(DEBUG_ACTIONS){\n            console.log(`Action: ${JSON.stringify(val)}`)\n        }}),\n        scan(reduce, initialState),\n        tap(val =>{if(DEBUG_STATE){\n            console.log(`State: ${JSON.stringify(val)}`) \n        }}),\n        shareReplay(1)\n    )\n\n    /*\n      Before there are any observers, make this hot to render and test,\n      this way when an observers subscribes, shareReplay already pipes\n      the last state\n    */\n    stateObservable.subscribe( () => {})\n    dispatcher.next({type:\"HeatState\", payload:\"\"})\n\n    return {dispatcher, stateObservable}\n}\n\nexport default store","import { map } from 'rxjs/operators'\n\nconst tweetFeedToAction = (tweetFeed, dispatcher) => \n    tweetFeed.pipe(\n        map( rawTweet => ({\n            type:\"TweesView/AddTweet\", \n            payload: {...rawTweet, liked: false}\n        }))\n    ).subscribe(addTweetAction => {\n        dispatcher.next(addTweetAction)\n    })\n\nexport default tweetFeedToAction","import { interval } from 'rxjs'\nimport { map } from 'rxjs/operators'\n\nlet removeOlderTweets = (everyIntervalMillis, olderThanMillis, outputObservable) => {\n    interval(everyIntervalMillis).pipe(map(i => ({\n        type: \"TweesView/RemoveTweets\",\n        payload: new Date().getTime() - olderThanMillis\n    }))).subscribe( action => outputObservable.next(action))\n}\n\nexport default removeOlderTweets","import Immutable from 'immutable'\n\nconst initialState = Immutable.fromJS({\n    likedCounter: 0,\n    tweetsVisibility: \"All\",\n    tweets: Immutable.fromJS([])\n})\n\nconst tweetsViewReducer = (state = initialState, {type, payload}) => {\n    switch (type) {\n        case \"TweesView/AddTweet\": \n            return state.update(\"tweets\", tweets => tweets.insert(0, payload))\n        case \"TweesView/RemoveTweets\": \n            let newStateAfterRemovingTweets = state.update(\"tweets\", tweets => tweets.filter( tweet => tweet[\"timestamp\"] > payload))\n            let countLikes = newStateAfterRemovingTweets.get(\"tweets\").filter(t => t.liked).size\n            return newStateAfterRemovingTweets.set(\"likedCounter\", countLikes)\n        case \"TweesView/ClearTweets\": \n            return state.update(\"tweets\", () => Immutable.fromJS([])).set(\"likedCounter\", 0)\n        case \"TweesView/LikeTweet\": \n        case \"TweesView/UnlikeTweet\": \n            let index = state.get(\"tweets\").findIndex((tweet) => tweet[\"timestamp\"] === payload)\n            if(index === -1) return state\n            let liked = true\n            if(type === \"TweesView/LikeTweet\"){\n                liked = true\n            }\n            if(type === \"TweesView/UnlikeTweet\"){\n                liked = false\n            }\n            let newStateAfterChangeLikes = state.update(\"likedCounter\", (count) => count + ((liked)?1:-1))\n            return newStateAfterChangeLikes.update(\"tweets\", \n                tweets => \n                    tweets.update(\n                        tweets.findIndex((tweet) => tweet[\"timestamp\"] === payload), \n                        (tweet) => ({...tweet, liked: liked})\n                    )\n            )\n        case \"TweesView/ToggleView\": return state.set(\"tweetsVisibility\", payload)\n        default:\n            break        \n    }\n    return state\n}\n\nexport default tweetsViewReducer","import { interval, merge } from 'rxjs'\nimport { map } from 'rxjs/operators'\n\nconst createTweetSource = (frequency, account, attribute) => {\n    return interval(frequency).pipe(map(i => ({\n        account,\n        timestamp: Date.now(),\n        content: `${attribute} Tweet number ${i + 1}`\n    })));\n}\nconst tweets = merge(\n    createTweetSource(5000, 'AwardsDarwin', 'Facepalm'),\n    createTweetSource(3000, 'iamdevloper', 'Expert'),\n    createTweetSource(5000, 'CommitStrip', 'Funny')\n);\n\nexport default tweets","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport Store from './store/Store'\nimport tweetFeedToAction from './tweetsSource/tweetFeedToAction'\nimport removeOlderTweets from './tweetsSource/removeOlderTweets'\nimport tweetsView from './tweetsView/TweetsViewReducer'\nimport Tweets from './DataSource'\n\nconst {dispatcher, stateObservable} = Store({\n    tweetsView\n})\n\ntweetFeedToAction(Tweets, dispatcher)\nremoveOlderTweets(1000, 30000, dispatcher)\n\nstateObservable.subscribe( app =>\n    ReactDOM.render(\n        <React.StrictMode>\n            <App \n                dispatcher={dispatcher}\n                app={app}\n            />\n        </React.StrictMode>,\n        document.getElementById('root')\n    )\n)"],"sourceRoot":""}